{"version":3,"file":"static/js/912.423368ca.chunk.js","mappings":"kNACA,EAAuB,uBAAvB,EAAsD,wB,6BCkEtD,EA5DiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAmB9B,OACE,kBAAMC,UAAWC,EAAUC,SAlBR,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfX,GACEY,EAAAA,EAAAA,IAAa,CACXC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAEnCG,MAAK,SAAAC,GACLC,EAAAA,GAAAA,QAAA,UACKD,EAASE,QAAQC,KAAKT,KAD3B,qCAGD,IACDH,EAAKa,OACN,EAGoDC,aAAa,MAAhE,WACE,mBAAOnB,UAAWC,EAAlB,sBAEE,kBACEmB,KAAK,OACLZ,KAAK,OACLa,UAAQ,EACRC,QAAQ,yHACRC,MAAM,uKAGV,mBAAOvB,UAAWC,EAAlB,mBAEE,kBACEmB,KAAK,QACLZ,KAAK,QACLa,UAAQ,EACRC,QAAQ,qGACRC,MAAM,oCAGV,mBAAOvB,UAAWC,EAAlB,sBAEE,kBACEmB,KAAK,WACLZ,KAAK,WACLc,QAAQ,uCACRD,UAAQ,EACRE,MAAM,mHAGV,mBAAQH,KAAK,SAASI,SAAU3B,EAAhC,wBAKL,C,sKC/DY4B,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEtB7B,EAAkB,SAAA2B,GAAK,OAAIA,EAAMC,SAAS9B,SAAnB,EAEvBgC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,EAEnBC,EAAoB,SAAAL,GAAK,OAAIA,EAAMM,MAAV,EAEzBC,GAAwBC,EAAAA,EAAAA,IACnC,CAACT,EAAgBM,IACjB,SAACJ,EAAUK,GACT,GAAKL,EACL,OAAOA,EAASK,QAAO,SAAAG,GAAO,OAC5BA,EAAQ3B,KAAK4B,cAAcC,SAASL,EAAOI,cADf,GAG/B,G","sources":["webpack://goit-react-hw-08-phonebook/./src/Pages/Register/Register.module.css?c8bd","Pages/Register/Register.jsx","redux/contacts/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Register_form__rczFl\",\"label\":\"Register_label__W5Hcx\"};","import { useDispatch, useSelector } from 'react-redux';\n\nimport { registerUser } from 'redux/user/operations';\nimport css from './Register.module.css';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { toast } from 'react-toastify';\n\nconst Register = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      registerUser({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    ).then(response => {\n      toast.success(\n        `${response.payload.user.name} you have successfully registered`\n      );\n    });\n    form.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <label className={css.label}>\n        Username\n        <input\n          type=\"text\"\n          name=\"name\"\n          required\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan, Aragorn son of Aratorn\"\n        />\n      </label>\n      <label className={css.label}>\n        Email\n        <input\n          type=\"email\"\n          name=\"email\"\n          required\n          pattern=\"[a-zA-Zа-яА-Я0-9._%+-]+@[a-zA-Zа-яА-Я0-9.-]+\\.[a-z]{2,4}$\"\n          title=\"Email example User@mail.com\"\n        />\n      </label>\n      <label className={css.label}>\n        Password\n        <input\n          type=\"password\"\n          name=\"password\"\n          pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}\"\n          required\n          title=\"Must contain at least one number and one uppercase and lowercase letter, and at least 6 or more characters\"\n        />\n      </label>\n      <button type=\"submit\" disabled={isLoading}>\n        Register\n      </button>\n    </form>\n  );\n};\n\nexport default Register;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    if (!contacts) return;\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n"],"names":["dispatch","useDispatch","isLoading","useSelector","selectIsLoading","className","css","onSubmit","e","preventDefault","form","currentTarget","registerUser","name","elements","value","email","password","then","response","toast","payload","user","reset","autoComplete","type","required","pattern","title","disabled","selectContacts","state","contacts","items","selectError","error","selectFilterValue","filter","selectVisibleContacts","createSelector","contact","toLowerCase","includes"],"sourceRoot":""}